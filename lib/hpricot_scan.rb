module Hpricot
    class ParseError < StandardError; end

    class << self
        attr_accessor :buffer_size

        def scan(source, &block)
            HpricotScanner.new.hpricot_scan(source,&block)
        end
    end
end

class HpricotScanner
    NO_WAY_SERIOUSLY = "*** This should not happen, please send a bug report with the HTML you're parsing to why@whytheluckystiff.net.  So sorry!"
    DEFAULT_BUFFER_SIZE = 16384

    SINGLE_QUOTE = ?'
    DOUBLE_QUOTE = ?"

    def initialize
        @cs        = nil
        @act       = nil
        @have      = 0
        @nread     = 0
        @curline   = 1
        @p         = -1
        @text      = false
        @ts        = -1
        @te        = nil
        @eof       = -1
        @buf       = nil
        @attr      = nil
        @tag       = nil
        @akey      = nil
        @aval      = nil
        @mark_tag  = -1
        @mark_akey = -1
        @mark_aval = -1
        @done      = false
        @ele_open  = false
        @taint     = false
        @block     = nil

        @buffer_size = Hpricot.buffer_size ||= DEFAULT_BUFFER_SIZE
    end

    def rb_yield_tokens(sym, tag, attr, raw, taint)
        raw = tag if sym == :text
        ary = [sym, tag, attr, raw]

        if taint then
            ary.taint
            tag.taint
            attr.taint
            raw.taint
        end

        @block.call(ary)
    end

    def ELE(n)
        if @te > @ts || @text then
            raw_string = nil
            @ele_open, @text = false, false

            if @ts != -1 && n != :cdata && n != :text && n != :procins && n != :comment then
                raw_string = @buf[@ts, @te - @ts].force_encoding(@encoding)
            end

            rb_yield_tokens(n, @tag[0], @attr, raw_string, @taint)
        end
    end

    def ATTR(k, v)
        unless k.nil? then
            @attr = {} if @attr.nil?
            if k.class == Array then
                if v.class == Array then
                    @attr[k[0]] = v[0] unless k[0].nil?
                else
                    @attr[k[0]] = v unless k[0].nil?
                end
            else
                if v.class == Array then
                    @attr[k] = v[0] unless k.nil?
                else
                    @attr[k] = v unless k.nil?
                end
            end
        end
    end

    def SET(n, e)
        mark = 0
        case n.object_id
            when @tag.object_id then
                if @mark_tag == -1 or e == @mark_tag then
                    @tag[0] = ''
                elsif e > @mark_tag then
                    @tag[0] = @buf[@mark_tag, e - @mark_tag].force_encoding(@encoding)
                end
            when @akey.object_id then
                if @mark_akey == -1 or e == @mark_akey then
                    @akey[0] = ''
                elsif e > @mark_akey then
                    @akey[0] = @buf[@mark_akey, e - @mark_akey].force_encoding(@encoding)
                end
            when @aval.object_id then
                if @mark_aval == -1 or e == @mark_aval then
                    @aval[0] = ''
                elsif e > @mark_aval then
                    @aval[0] = @buf[@mark_aval, e - @mark_aval].force_encoding(@encoding)
                end
        end
    end

    def CAT(n, e) 
        if n[0].nil? then
            SET(n, e)
        else
            mark = 0
            case n.object_id
                when @tag.object_id then mark = @mark_tag
                when @akey.object_id then mark = @mark_akey
                when @aval.object_id then mark = @mark_aval
            end
            n[0] << @buf[mark, e - mark].force_encoding(@encoding)
        end
    end

    def SLIDE(n)
        mark = 0

        case n.object_id
            when @tag.object_id then mark = @mark_tag
            when @akey.object_id then mark = @mark_akey
            when @aval.object_id then mark = @mark_aval
        end

        if mark > @ts then
            case n.object_id
                when @tag.object_id then @mark_tag  -= @ts
                when @akey.object_id then @mark_akey -= @ts
                when @aval.object_id then @mark_aval -= @ts
            end
        end

    end

    def TEXT_PASS
        return if @text

        if @ele_open then
            @ele_open = false
            @mark_tag = @ts if @ts > -1
        else
            @mark_tag = @p
        end

        @attr, @tag[0], @text = nil, nil, true
    end

    def EBLK(n, t)
        CAT(@tag, @p - t + 1)
        ELE(n)
    end

    def rb_raise(error, message)
        raise error, message
    end

    def rb_str_new2(s)
        s
    end


    class << self
        attr_accessor :_hpricot_scan_trans_keys
    end
    self._hpricot_scan_trans_keys = [
        45, 68, 91, 45, 79, 67, 84, 89, 80, 69, 32, 9,
        13, 32, 58, 95, 9, 13, 65, 90, 97, 122, 32, 62,
        63, 91, 95, 9, 13, 45, 46, 48, 58, 65, 90, 97,
        122, 32, 62, 80, 83, 91, 9, 13, 85, 66, 76, 73,
        67, 32, 9, 13, 32, 34, 39, 9, 13, 9, 34, 61,
        95, 32, 37, 39, 59, 63, 90, 97, 122, 9, 34, 61,
        95, 32, 37, 39, 59, 63, 90, 97, 122, 32, 62, 91,
        9, 13, 32, 34, 39, 62, 91, 9, 13, 34, 34, 32,
        62, 91, 9, 13, 93, 32, 62, 9, 13, 39, 39, 9,
        39, 61, 95, 32, 33, 35, 37, 40, 59, 63, 90, 97,
        122, 9, 39, 61, 95, 32, 33, 35, 37, 40, 59, 63,
        90, 97, 122, 9, 32, 33, 39, 62, 91, 95, 10, 13,
        35, 37, 40, 59, 61, 90, 97, 122, 9, 32, 34, 39,
        62, 91, 95, 10, 13, 33, 37, 40, 59, 61, 90, 97,
        122, 9, 32, 33, 39, 62, 91, 95, 10, 13, 35, 37,
        40, 59, 61, 90, 97, 122, 9, 32, 34, 39, 62, 91,
        95, 10, 13, 33, 37, 40, 59, 61, 90, 97, 122, 32,
        34, 39, 62, 91, 9, 13, 34, 39, 34, 39, 32, 39,
        62, 91, 9, 13, 39, 93, 32, 62, 93, 9, 13, 32,
        39, 62, 9, 13, 32, 34, 62, 91, 9, 13, 34, 93,
        32, 34, 62, 9, 13, 32, 39, 62, 91, 9, 13, 9,
        39, 61, 95, 32, 33, 35, 37, 40, 59, 63, 90, 97,
        122, 89, 83, 84, 69, 77, 67, 68, 65, 84, 65, 91,
        58, 95, 65, 90, 97, 122, 32, 62, 63, 95, 9, 13,
        45, 46, 48, 58, 65, 90, 97, 122, 32, 62, 9, 13,
        32, 47, 62, 63, 95, 9, 13, 45, 58, 65, 90, 97,
        122, 32, 47, 62, 63, 95, 9, 13, 45, 58, 65, 90,
        97, 122, 32, 47, 61, 62, 63, 95, 9, 13, 45, 58,
        65, 90, 97, 122, 32, 47, 61, 62, 63, 95, 9, 13,
        45, 58, 65, 90, 97, 122, 62, 13, 32, 34, 39, 47,
        60, 62, 9, 10, 11, 12, 13, 32, 47, 60, 62, 9,
        10, 11, 12, 32, 47, 62, 63, 95, 9, 13, 45, 58,
        65, 90, 97, 122, 13, 32, 47, 60, 62, 63, 95, 9,
        10, 11, 12, 45, 58, 65, 90, 97, 122, 13, 32, 47,
        60, 61, 62, 63, 95, 9, 10, 11, 12, 45, 58, 65,
        90, 97, 122, 13, 32, 47, 60, 61, 62, 63, 95, 9,
        10, 11, 12, 45, 58, 65, 90, 97, 122, 13, 32, 47,
        60, 62, 9, 10, 11, 12, 13, 32, 34, 39, 47, 60,
        62, 9, 10, 11, 12, 13, 32, 34, 39, 47, 60, 62,
        63, 95, 9, 10, 11, 12, 45, 58, 65, 90, 97, 122,
        13, 32, 34, 39, 47, 60, 62, 63, 95, 9, 10, 11,
        12, 45, 58, 65, 90, 97, 122, 13, 32, 34, 47, 60,
        62, 92, 9, 10, 11, 12, 13, 32, 34, 47, 60, 62,
        92, 9, 10, 11, 12, 32, 34, 47, 62, 63, 92, 95,
        9, 13, 45, 58, 65, 90, 97, 122, 34, 92, 34, 92,
        32, 34, 47, 61, 62, 63, 92, 95, 9, 13, 45, 58,
        65, 90, 97, 122, 32, 34, 47, 61, 62, 63, 92, 95,
        9, 13, 45, 58, 65, 90, 97, 122, 34, 62, 92, 13,
        32, 34, 39, 47, 60, 62, 92, 9, 10, 11, 12, 13,
        32, 34, 39, 47, 60, 62, 92, 9, 10, 11, 12, 13,
        32, 34, 39, 47, 60, 62, 63, 92, 95, 9, 10, 11,
        12, 45, 58, 65, 90, 97, 122, 13, 32, 34, 39, 47,
        60, 62, 63, 92, 95, 9, 10, 11, 12, 45, 58, 65,
        90, 97, 122, 13, 32, 34, 47, 60, 62, 63, 92, 95,
        9, 10, 11, 12, 45, 58, 65, 90, 97, 122, 13, 32,
        34, 47, 60, 62, 63, 92, 95, 9, 10, 11, 12, 45,
        58, 65, 90, 97, 122, 13, 32, 34, 47, 60, 61, 62,
        63, 92, 95, 9, 10, 11, 12, 45, 58, 65, 90, 97,
        122, 13, 32, 34, 47, 60, 61, 62, 63, 92, 95, 9,
        10, 11, 12, 45, 58, 65, 90, 97, 122, 13, 32, 34,
        47, 60, 62, 92, 9, 10, 11, 12, 13, 32, 34, 47,
        60, 62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47,
        60, 62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47,
        60, 62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47,
        60, 62, 92, 9, 10, 11, 12, 32, 34, 39, 47, 62,
        63, 92, 95, 9, 13, 45, 58, 65, 90, 97, 122, 34,
        39, 92, 32, 39, 47, 62, 63, 92, 95, 9, 13, 45,
        58, 65, 90, 97, 122, 39, 92, 39, 92, 32, 39, 47,
        61, 62, 63, 92, 95, 9, 13, 45, 58, 65, 90, 97,
        122, 32, 39, 47, 61, 62, 63, 92, 95, 9, 13, 45,
        58, 65, 90, 97, 122, 39, 62, 92, 13, 32, 34, 39,
        47, 60, 62, 92, 9, 10, 11, 12, 13, 32, 39, 47,
        60, 62, 92, 9, 10, 11, 12, 13, 32, 39, 47, 60,
        62, 63, 92, 95, 9, 10, 11, 12, 45, 58, 65, 90,
        97, 122, 13, 32, 39, 47, 60, 61, 62, 63, 92, 95,
        9, 10, 11, 12, 45, 58, 65, 90, 97, 122, 13, 32,
        39, 47, 60, 61, 62, 63, 92, 95, 9, 10, 11, 12,
        45, 58, 65, 90, 97, 122, 13, 32, 39, 47, 60, 62,
        92, 9, 10, 11, 12, 13, 32, 39, 47, 60, 62, 92,
        9, 10, 11, 12, 13, 32, 34, 39, 47, 60, 62, 92,
        9, 10, 11, 12, 13, 32, 34, 39, 47, 60, 62, 63,
        92, 95, 9, 10, 11, 12, 45, 58, 65, 90, 97, 122,
        13, 32, 34, 39, 47, 60, 62, 63, 92, 95, 9, 10,
        11, 12, 45, 58, 65, 90, 97, 122, 13, 32, 34, 39,
        47, 60, 62, 92, 9, 10, 11, 12, 13, 32, 34, 39,
        47, 60, 62, 63, 92, 95, 9, 10, 11, 12, 45, 58,
        65, 90, 97, 122, 13, 32, 34, 39, 47, 60, 61, 62,
        63, 92, 95, 9, 10, 11, 12, 45, 58, 65, 90, 97,
        122, 32, 34, 39, 47, 61, 62, 63, 92, 95, 9, 13,
        45, 58, 65, 90, 97, 122, 32, 34, 39, 47, 61, 62,
        63, 92, 95, 9, 13, 45, 58, 65, 90, 97, 122, 34,
        39, 62, 92, 34, 39, 92, 13, 32, 34, 39, 47, 60,
        62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47, 60,
        62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47, 60,
        62, 63, 92, 95, 9, 10, 11, 12, 45, 58, 65, 90,
        97, 122, 13, 32, 34, 39, 47, 60, 62, 63, 92, 95,
        9, 10, 11, 12, 45, 58, 65, 90, 97, 122, 13, 32,
        34, 39, 47, 60, 62, 63, 92, 95, 9, 10, 11, 12,
        45, 58, 65, 90, 97, 122, 13, 32, 34, 39, 47, 60,
        62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47, 60,
        62, 92, 9, 10, 11, 12, 13, 32, 34, 39, 47, 60,
        62, 63, 92, 95, 9, 10, 11, 12, 45, 58, 65, 90,
        97, 122, 32, 34, 39, 47, 62, 63, 92, 95, 9, 13,
        45, 58, 65, 90, 97, 122, 32, 34, 39, 47, 62, 63,
        92, 95, 9, 13, 45, 58, 65, 90, 97, 122, 13, 32,
        34, 39, 47, 60, 62, 92, 9, 10, 11, 12, 13, 32,
        34, 39, 47, 60, 61, 62, 63, 92, 95, 9, 10, 11,
        12, 45, 58, 65, 90, 97, 122, 13, 32, 39, 47, 60,
        62, 63, 92, 95, 9, 10, 11, 12, 45, 58, 65, 90,
        97, 122, 34, 39, 92, 32, 39, 47, 62, 63, 92, 95,
        9, 13, 45, 58, 65, 90, 97, 122, 13, 32, 34, 39,
        47, 60, 62, 92, 9, 10, 11, 12, 32, 34, 47, 62,
        63, 92, 95, 9, 13, 45, 58, 65, 90, 97, 122, 34,
        39, 92, 13, 32, 39, 47, 60, 62, 92, 9, 10, 11,
        12, 34, 92, 39, 92, 13, 32, 34, 39, 47, 60, 62,
        9, 10, 11, 12, 58, 95, 120, 65, 90, 97, 122, 32,
        63, 95, 9, 13, 45, 46, 48, 58, 65, 90, 97, 122,
        32, 63, 95, 109, 9, 13, 45, 46, 48, 58, 65, 90,
        97, 122, 32, 63, 95, 108, 9, 13, 45, 46, 48, 58,
        65, 90, 97, 122, 32, 63, 95, 9, 13, 45, 46, 48,
        58, 65, 90, 97, 122, 101, 114, 115, 105, 111, 110, 32,
        61, 9, 13, 32, 34, 39, 9, 13, 95, 45, 46, 48,
        58, 65, 90, 97, 122, 34, 95, 45, 46, 48, 58, 65,
        90, 97, 122, 32, 62, 63, 9, 13, 32, 62, 63, 101,
        115, 9, 13, 62, 110, 99, 111, 100, 105, 110, 103, 32,
        61, 9, 13, 32, 34, 39, 9, 13, 65, 90, 97, 122,
        34, 95, 45, 46, 48, 57, 65, 90, 97, 122, 32, 62,
        63, 9, 13, 32, 62, 63, 115, 9, 13, 116, 97, 110,
        100, 97, 108, 111, 110, 101, 32, 61, 9, 13, 32, 34,
        39, 9, 13, 110, 121, 111, 34, 32, 62, 63, 9, 13,
        101, 115, 110, 121, 111, 39, 101, 115, 65, 90, 97, 122,
        39, 95, 45, 46, 48, 57, 65, 90, 97, 122, 95, 45,
        46, 48, 58, 65, 90, 97, 122, 39, 95, 45, 46, 48,
        58, 65, 90, 97, 122, 62, 62, 10, 60, 33, 47, 58,
        63, 95, 65, 90, 97, 122, 39, 93, 34, 34, 92, 39,
        92, 34, 39, 92, 32, 9, 13, 32, 118, 9, 13, 10,
        45, 45, 10, 93, 93, 10, 62, 63, 62, 0
    ]

    class << self
        attr_accessor :_hpricot_scan_key_offsets
    end
    self._hpricot_scan_key_offsets = [
        0, 3, 4, 5, 6, 7, 8, 9, 
        10, 13, 22, 37, 44, 45, 46, 47, 
        48, 49, 52, 57, 69, 81, 86, 93, 
        94, 95, 100, 101, 105, 106, 107, 121, 
        135, 152, 169, 186, 203, 210, 212, 214, 
        220, 222, 227, 232, 238, 240, 245, 251, 
        265, 266, 267, 268, 269, 270, 271, 272, 
        273, 274, 275, 276, 282, 296, 300, 313, 
        326, 340, 354, 355, 366, 375, 388, 405, 
        423, 441, 450, 461, 480, 499, 510, 521, 
        536, 538, 540, 556, 572, 575, 587, 599, 
        619, 639, 658, 677, 697, 717, 728, 739, 
        751, 763, 775, 791, 794, 809, 811, 813, 
        829, 845, 848, 860, 871, 890, 910, 930, 
        941, 952, 964, 984, 1004, 1016, 1036, 1057, 
        1074, 1091, 1095, 1098, 1110, 1122, 1142, 1162, 
        1182, 1194, 1206, 1226, 1242, 1258, 1270, 1291, 
        1310, 1313, 1328, 1340, 1355, 1358, 1369, 1371, 
        1373, 1384, 1391, 1404, 1418, 1432, 1445, 1446, 
        1447, 1448, 1449, 1450, 1451, 1455, 1460, 1469, 
        1479, 1484, 1491, 1492, 1493, 1494, 1495, 1496, 
        1497, 1498, 1499, 1503, 1508, 1512, 1522, 1527, 
        1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 
        1541, 1542, 1546, 1551, 1553, 1554, 1555, 1560, 
        1561, 1562, 1564, 1565, 1566, 1567, 1568, 1572, 
        1582, 1591, 1601, 1602, 1603, 1605, 1614, 1615, 
        1616, 1617, 1619, 1621, 1624, 1627, 1631, 1633, 
        1634, 1636, 1637, 1640
    ]

    class << self
        attr_accessor :_hpricot_scan_single_lengths
    end
    self._hpricot_scan_single_lengths = [
        3, 1, 1, 1, 1, 1, 1, 1, 
        1, 3, 5, 5, 1, 1, 1, 1, 
        1, 1, 3, 4, 4, 3, 5, 1, 
        1, 3, 1, 2, 1, 1, 4, 4, 
        7, 7, 7, 7, 5, 2, 2, 4, 
        2, 3, 3, 4, 2, 3, 4, 4, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 2, 4, 2, 5, 5, 
        6, 6, 1, 7, 5, 5, 7, 8, 
        8, 5, 7, 9, 9, 7, 7, 7, 
        2, 2, 8, 8, 3, 8, 8, 10, 
        10, 9, 9, 10, 10, 7, 7, 8, 
        8, 8, 8, 3, 7, 2, 2, 8, 
        8, 3, 8, 7, 9, 10, 10, 7, 
        7, 8, 10, 10, 8, 10, 11, 9, 
        9, 4, 3, 8, 8, 10, 10, 10, 
        8, 8, 10, 8, 8, 8, 11, 9, 
        3, 7, 8, 7, 3, 7, 2, 2, 
        7, 3, 3, 4, 4, 3, 1, 1, 
        1, 1, 1, 1, 2, 3, 1, 2, 
        3, 5, 1, 1, 1, 1, 1, 1, 
        1, 1, 2, 3, 0, 2, 3, 4, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 2, 3, 2, 1, 1, 3, 1, 
        1, 2, 1, 1, 1, 1, 0, 2, 
        1, 2, 1, 1, 2, 5, 1, 1, 
        1, 2, 2, 3, 1, 2, 2, 1, 
        2, 1, 3, 1
    ]

    class << self
        attr_accessor :_hpricot_scan_range_lengths
    end
    self._hpricot_scan_range_lengths = [
        0, 0, 0, 0, 0, 0, 0, 0, 
        1, 3, 5, 1, 0, 0, 0, 0, 
        0, 1, 1, 4, 4, 1, 1, 0, 
        0, 1, 0, 1, 0, 0, 5, 5, 
        5, 5, 5, 5, 1, 0, 0, 1, 
        0, 1, 1, 1, 0, 1, 1, 5, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 2, 5, 1, 4, 4, 
        4, 4, 0, 2, 2, 4, 5, 5, 
        5, 2, 2, 5, 5, 2, 2, 4, 
        0, 0, 4, 4, 0, 2, 2, 5, 
        5, 5, 5, 5, 5, 2, 2, 2, 
        2, 2, 4, 0, 4, 0, 0, 4, 
        4, 0, 2, 2, 5, 5, 5, 2, 
        2, 2, 5, 5, 2, 5, 5, 4, 
        4, 0, 0, 2, 2, 5, 5, 5, 
        2, 2, 5, 4, 4, 2, 5, 5, 
        0, 4, 2, 4, 0, 2, 0, 0, 
        2, 2, 5, 5, 5, 5, 0, 0, 
        0, 0, 0, 0, 1, 1, 4, 4, 
        1, 1, 0, 0, 0, 0, 0, 0, 
        0, 0, 1, 1, 2, 4, 1, 1, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 1, 1, 0, 0, 0, 1, 0, 
        0, 0, 0, 0, 0, 0, 2, 4, 
        4, 4, 0, 0, 0, 2, 0, 0, 
        0, 0, 0, 0, 1, 1, 0, 0, 
        0, 0, 0, 0
    ]

    class << self
        attr_accessor :_hpricot_scan_index_offsets
    end
    self._hpricot_scan_index_offsets = [
        0, 4, 6, 8, 10, 12, 14, 16, 
        18, 21, 28, 39, 46, 48, 50, 52, 
        54, 56, 59, 64, 73, 82, 87, 94, 
        96, 98, 103, 105, 109, 111, 113, 123, 
        133, 146, 159, 172, 185, 192, 195, 198, 
        204, 207, 212, 217, 223, 226, 231, 237, 
        247, 249, 251, 253, 255, 257, 259, 261, 
        263, 265, 267, 269, 274, 284, 288, 298, 
        308, 319, 330, 332, 342, 350, 360, 373, 
        387, 401, 409, 419, 434, 449, 459, 469, 
        481, 484, 487, 500, 513, 517, 528, 539, 
        555, 571, 586, 601, 617, 633, 643, 653, 
        664, 675, 686, 699, 703, 715, 718, 721, 
        734, 747, 751, 762, 772, 787, 803, 819, 
        829, 839, 850, 866, 882, 893, 909, 926, 
        940, 954, 959, 963, 974, 985, 1001, 1017, 
        1033, 1044, 1055, 1071, 1084, 1097, 1108, 1125, 
        1140, 1144, 1156, 1167, 1179, 1183, 1193, 1196, 
        1199, 1209, 1215, 1224, 1234, 1244, 1253, 1255, 
        1257, 1259, 1261, 1263, 1265, 1269, 1274, 1280, 
        1287, 1292, 1299, 1301, 1303, 1305, 1307, 1309, 
        1311, 1313, 1315, 1319, 1324, 1327, 1334, 1339, 
        1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 
        1361, 1363, 1367, 1372, 1375, 1377, 1379, 1384, 
        1386, 1388, 1391, 1393, 1395, 1397, 1399, 1402, 
        1409, 1415, 1422, 1424, 1426, 1429, 1437, 1439, 
        1441, 1443, 1446, 1449, 1453, 1456, 1460, 1463, 
        1465, 1468, 1470, 1474
    ]

    class << self
        attr_accessor :_hpricot_scan_trans_targs
    end
    self._hpricot_scan_trans_targs = [
        1, 2, 53, 204, 204, 204, 3, 204, 
        4, 204, 5, 204, 6, 204, 7, 204, 
        8, 204, 9, 9, 204, 9, 10, 10, 
        9, 10, 10, 204, 11, 204, 10, 26, 
        10, 11, 10, 10, 10, 10, 204, 11, 
        204, 12, 48, 26, 11, 204, 13, 204, 
        14, 204, 15, 204, 16, 204, 17, 204, 
        18, 18, 204, 18, 19, 30, 18, 204, 
        20, 21, 20, 20, 20, 20, 20, 20, 
        204, 20, 21, 20, 20, 20, 20, 20, 
        20, 204, 22, 204, 26, 22, 204, 22, 
        23, 28, 204, 26, 22, 204, 25, 24, 
        25, 24, 25, 204, 26, 25, 204, 27, 
        26, 27, 204, 27, 204, 25, 29, 25, 
        29, 31, 32, 31, 31, 31, 31, 31, 
        31, 31, 204, 31, 32, 31, 31, 31, 
        31, 31, 31, 31, 204, 33, 33, 31, 
        32, 204, 26, 31, 22, 31, 31, 31, 
        31, 204, 33, 33, 23, 34, 204, 26, 
        31, 22, 31, 31, 31, 31, 204, 35, 
        35, 47, 32, 206, 40, 47, 36, 47, 
        47, 47, 47, 29, 35, 35, 37, 34, 
        206, 40, 47, 36, 47, 47, 47, 47, 
        29, 36, 37, 46, 206, 40, 36, 29, 
        39, 43, 38, 39, 43, 38, 39, 25, 
        206, 40, 39, 29, 41, 42, 40, 41, 
        207, 27, 41, 26, 42, 25, 206, 42, 
        29, 43, 25, 208, 44, 43, 24, 41, 
        45, 44, 45, 25, 208, 45, 24, 39, 
        25, 206, 40, 39, 29, 47, 32, 47, 
        47, 47, 47, 47, 47, 47, 29, 49, 
        204, 50, 204, 51, 204, 52, 204, 21, 
        204, 54, 204, 55, 204, 56, 204, 57, 
        204, 58, 204, 204, 204, 60, 60, 60, 
        60, 204, 61, 204, 60, 60, 61, 60, 
        60, 60, 60, 204, 61, 204, 61, 204, 
        63, 66, 204, 62, 62, 63, 62, 62, 
        62, 204, 63, 66, 204, 64, 64, 63, 
        64, 64, 64, 204, 65, 66, 67, 204, 
        64, 64, 65, 64, 64, 64, 204, 65, 
        66, 67, 204, 64, 64, 65, 64, 64, 
        64, 204, 204, 204, 144, 144, 142, 143, 
        73, 204, 204, 144, 74, 68, 69, 69, 
        73, 204, 204, 69, 70, 68, 69, 66, 
        204, 64, 64, 69, 64, 64, 64, 204, 
        69, 69, 73, 204, 204, 71, 71, 69, 
        70, 71, 71, 71, 68, 65, 65, 73, 
        204, 74, 204, 71, 71, 65, 72, 71, 
        71, 71, 68, 65, 65, 73, 204, 74, 
        204, 71, 71, 65, 72, 71, 71, 71, 
        68, 69, 69, 73, 204, 204, 69, 70, 
        68, 75, 75, 77, 141, 73, 204, 204, 
        75, 76, 68, 75, 75, 142, 143, 73, 
        204, 204, 71, 71, 75, 76, 71, 71, 
        71, 68, 75, 75, 77, 141, 73, 204, 
        204, 71, 71, 75, 76, 71, 71, 71, 
        68, 79, 79, 70, 93, 80, 209, 94, 
        79, 90, 78, 79, 79, 70, 93, 80, 
        209, 94, 79, 90, 78, 79, 69, 84, 
        209, 82, 81, 82, 79, 82, 82, 82, 
        80, 69, 81, 80, 79, 81, 80, 83, 
        69, 84, 85, 209, 82, 81, 82, 83, 
        82, 82, 82, 80, 83, 69, 84, 85, 
        209, 82, 81, 82, 83, 82, 82, 82, 
        80, 69, 209, 81, 80, 86, 86, 139, 
        140, 93, 80, 209, 94, 86, 95, 78, 
        87, 87, 139, 140, 93, 80, 209, 94, 
        87, 88, 78, 87, 87, 139, 140, 93, 
        80, 209, 91, 94, 91, 87, 88, 91, 
        91, 91, 78, 87, 87, 89, 96, 93, 
        80, 209, 91, 94, 91, 87, 88, 91, 
        91, 91, 78, 79, 79, 70, 93, 80, 
        209, 91, 94, 91, 79, 90, 91, 91, 
        91, 78, 79, 79, 70, 93, 80, 209, 
        91, 94, 91, 79, 90, 91, 91, 91, 
        78, 83, 83, 70, 93, 80, 95, 209, 
        91, 94, 91, 83, 92, 91, 91, 91, 
        78, 83, 83, 70, 93, 80, 95, 209, 
        91, 94, 91, 83, 92, 91, 91, 91, 
        78, 79, 79, 70, 93, 80, 209, 94, 
        79, 90, 78, 79, 79, 90, 93, 80, 
        209, 94, 79, 90, 78, 87, 87, 89, 
        96, 93, 80, 209, 94, 87, 88, 78, 
        98, 98, 108, 90, 128, 99, 211, 129, 
        98, 117, 97, 98, 98, 108, 90, 128, 
        99, 211, 129, 98, 117, 97, 98, 100, 
        79, 121, 211, 120, 122, 120, 98, 120, 
        120, 120, 99, 100, 79, 122, 99, 100, 
        69, 105, 210, 103, 102, 103, 100, 103, 
        103, 103, 101, 69, 102, 101, 100, 102, 
        101, 104, 69, 105, 106, 210, 103, 102, 
        103, 104, 103, 103, 103, 101, 104, 69, 
        105, 106, 210, 103, 102, 103, 104, 103, 
        103, 103, 101, 69, 210, 102, 101, 138, 
        138, 136, 137, 111, 101, 210, 112, 138, 
        113, 107, 100, 100, 70, 111, 101, 210, 
        112, 100, 108, 107, 100, 100, 70, 111, 
        101, 210, 109, 112, 109, 100, 108, 109, 
        109, 109, 107, 104, 104, 70, 111, 101, 
        113, 210, 109, 112, 109, 104, 110, 109, 
        109, 109, 107, 104, 104, 70, 111, 101, 
        113, 210, 109, 112, 109, 104, 110, 109, 
        109, 109, 107, 100, 100, 70, 111, 101, 
        210, 112, 100, 108, 107, 100, 100, 108, 
        111, 101, 210, 112, 100, 108, 107, 114, 
        114, 116, 135, 111, 101, 210, 112, 114, 
        115, 107, 114, 114, 136, 137, 111, 101, 
        210, 109, 112, 109, 114, 115, 109, 109, 
        109, 107, 114, 114, 116, 135, 111, 101, 
        210, 109, 112, 109, 114, 115, 109, 109, 
        109, 107, 98, 98, 108, 90, 128, 99, 
        211, 129, 98, 117, 97, 98, 98, 108, 
        90, 128, 99, 211, 118, 129, 118, 98, 
        117, 118, 118, 118, 97, 119, 119, 108, 
        90, 128, 99, 133, 211, 118, 129, 118, 
        119, 134, 118, 118, 118, 97, 119, 100, 
        79, 121, 123, 211, 120, 122, 120, 119, 
        120, 120, 120, 99, 119, 100, 79, 121, 
        123, 211, 120, 122, 120, 119, 120, 120, 
        120, 99, 100, 79, 211, 122, 99, 98, 
        98, 122, 99, 124, 124, 131, 132, 128, 
        99, 211, 129, 124, 133, 97, 125, 125, 
        131, 132, 128, 99, 211, 129, 125, 126, 
        97, 125, 125, 131, 132, 128, 99, 211, 
        118, 129, 118, 125, 126, 118, 118, 118, 
        97, 125, 125, 127, 130, 128, 99, 211, 
        118, 129, 118, 125, 126, 118, 118, 118, 
        97, 98, 98, 108, 90, 128, 99, 211, 
        118, 129, 118, 98, 117, 118, 118, 118, 
        97, 98, 98, 108, 90, 128, 99, 211, 
        129, 98, 117, 97, 98, 98, 117, 117, 
        128, 99, 211, 129, 98, 117, 97, 98, 
        98, 108, 90, 128, 99, 211, 118, 129, 
        118, 98, 117, 118, 118, 118, 97, 98, 
        100, 79, 121, 211, 120, 122, 120, 98, 
        120, 120, 120, 99, 98, 100, 79, 121, 
        211, 120, 122, 120, 98, 120, 120, 120, 
        99, 125, 125, 127, 130, 128, 99, 211, 
        129, 125, 126, 97, 119, 119, 108, 90, 
        128, 99, 133, 211, 118, 129, 118, 119, 
        134, 118, 118, 118, 97, 100, 100, 70, 
        111, 101, 210, 109, 112, 109, 100, 108, 
        109, 109, 109, 107, 100, 79, 122, 99, 
        100, 69, 105, 210, 103, 102, 103, 100, 
        103, 103, 103, 101, 114, 114, 136, 137, 
        111, 101, 210, 112, 114, 115, 107, 79, 
        69, 84, 209, 82, 81, 82, 79, 82, 
        82, 82, 80, 100, 79, 122, 99, 100, 
        100, 70, 111, 101, 210, 112, 100, 108, 
        107, 69, 81, 80, 69, 102, 101, 75, 
        75, 142, 143, 73, 204, 204, 75, 76, 
        68, 146, 146, 147, 146, 146, 204, 212, 
        146, 146, 212, 146, 146, 146, 146, 204, 
        212, 146, 146, 148, 212, 146, 146, 146, 
        146, 204, 212, 146, 146, 149, 212, 146, 
        146, 146, 146, 204, 213, 146, 146, 213, 
        146, 146, 146, 146, 204, 151, 204, 152, 
        204, 153, 204, 154, 204, 155, 204, 156, 
        204, 156, 157, 156, 204, 157, 158, 200, 
        157, 204, 159, 159, 159, 159, 159, 204, 
        160, 159, 159, 159, 159, 159, 204, 161, 
        204, 162, 161, 204, 161, 204, 162, 163, 
        176, 161, 204, 204, 204, 164, 204, 165, 
        204, 166, 204, 167, 204, 168, 204, 169, 
        204, 170, 204, 170, 171, 170, 204, 171, 
        172, 198, 171, 204, 173, 173, 204, 174, 
        173, 173, 173, 173, 173, 204, 175, 204, 
        162, 175, 204, 175, 204, 162, 176, 175, 
        204, 177, 204, 178, 204, 179, 204, 180, 
        204, 181, 204, 182, 204, 183, 204, 184, 
        204, 185, 204, 185, 186, 185, 204, 186, 
        187, 193, 186, 204, 188, 191, 204, 189, 
        204, 190, 204, 190, 204, 162, 190, 204, 
        192, 204, 189, 204, 194, 196, 204, 195, 
        204, 190, 204, 197, 204, 195, 204, 199, 
        199, 204, 174, 199, 199, 199, 199, 199, 
        204, 201, 201, 201, 201, 201, 204, 160, 
        201, 201, 201, 201, 201, 204, 214, 214, 
        216, 216, 204, 205, 204, 0, 59, 62, 
        145, 62, 62, 62, 204, 25, 29, 27, 
        26, 25, 24, 69, 81, 80, 69, 102, 
        101, 100, 79, 122, 99, 212, 212, 204, 
        213, 150, 213, 204, 214, 215, 214, 202, 
        214, 216, 217, 216, 203, 216, 218, 218, 
        219, 218, 218, 218, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 204, 204, 204, 204, 204, 214, 216, 
        204, 204, 204, 204, 204, 204, 204, 204, 
        204, 214, 216, 218, 0
    ]

    class << self
        attr_accessor :_hpricot_scan_trans_actions
    end
    self._hpricot_scan_trans_actions = [
        0, 0, 0, 1, 2, 1, 0, 1, 
        0, 1, 0, 1, 0, 1, 0, 1, 
        0, 1, 0, 0, 1, 0, 3, 3, 
        0, 3, 3, 1, 4, 5, 0, 4, 
        0, 4, 0, 0, 0, 0, 1, 0, 
        6, 0, 0, 0, 0, 1, 0, 1, 
        0, 1, 0, 1, 0, 1, 0, 1, 
        0, 0, 1, 0, 0, 0, 0, 1, 
        7, 8, 7, 7, 7, 7, 7, 7, 
        1, 0, 9, 0, 0, 0, 0, 0, 
        0, 1, 0, 6, 0, 0, 1, 0, 
        0, 0, 6, 0, 0, 1, 10, 7, 
        12, 0, 0, 6, 0, 0, 11, 0, 
        0, 0, 6, 0, 11, 10, 7, 12, 
        0, 7, 8, 7, 7, 7, 7, 7, 
        7, 7, 1, 0, 9, 0, 0, 0, 
        0, 0, 0, 0, 1, 0, 0, 0, 
        9, 6, 0, 0, 0, 0, 0, 0, 
        0, 1, 0, 0, 0, 9, 6, 0, 
        0, 0, 0, 0, 0, 0, 1, 7, 
        7, 7, 13, 14, 7, 7, 7, 7, 
        7, 7, 7, 7, 0, 0, 0, 15, 
        16, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 12, 16, 0, 0, 0, 
        10, 10, 7, 12, 12, 0, 0, 12, 
        16, 0, 0, 0, 12, 0, 0, 0, 
        16, 0, 0, 0, 0, 12, 16, 0, 
        0, 0, 12, 16, 0, 0, 0, 12, 
        0, 0, 0, 12, 16, 0, 0, 7, 
        10, 14, 7, 7, 7, 0, 15, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        1, 0, 1, 0, 1, 0, 1, 0, 
        1, 0, 1, 0, 1, 0, 1, 0, 
        1, 0, 1, 17, 1, 3, 3, 3, 
        3, 1, 4, 18, 0, 0, 4, 0, 
        0, 0, 0, 1, 0, 19, 0, 1, 
        4, 4, 20, 0, 0, 4, 0, 0, 
        0, 1, 0, 0, 22, 21, 21, 0, 
        21, 21, 21, 1, 23, 24, 23, 25, 
        0, 0, 23, 0, 0, 0, 11, 0, 
        27, 0, 28, 26, 26, 0, 26, 26, 
        26, 11, 29, 11, 7, 7, 0, 0, 
        30, 11, 28, 7, 7, 7, 31, 31, 
        32, 11, 33, 31, 31, 0, 0, 27, 
        28, 26, 26, 0, 26, 26, 26, 11, 
        31, 31, 34, 11, 35, 26, 26, 31, 
        31, 26, 26, 26, 0, 36, 36, 37, 
        11, 23, 38, 0, 0, 36, 36, 0, 
        0, 0, 0, 31, 31, 34, 11, 0, 
        35, 26, 26, 31, 31, 26, 26, 26, 
        0, 31, 31, 32, 11, 33, 31, 31, 
        0, 39, 39, 0, 0, 40, 11, 33, 
        39, 39, 7, 7, 7, 0, 0, 30, 
        11, 28, 41, 41, 7, 7, 41, 41, 
        41, 7, 39, 39, 0, 0, 42, 11, 
        35, 41, 41, 39, 39, 41, 41, 41, 
        7, 39, 39, 43, 40, 7, 44, 7, 
        39, 39, 7, 31, 31, 45, 32, 0, 
        46, 0, 31, 31, 0, 0, 45, 27, 
        47, 26, 0, 26, 0, 26, 26, 26, 
        0, 45, 0, 0, 45, 0, 0, 23, 
        45, 24, 23, 48, 0, 0, 0, 23, 
        0, 0, 0, 0, 0, 45, 27, 0, 
        47, 26, 0, 26, 0, 26, 26, 26, 
        0, 45, 49, 0, 0, 7, 7, 45, 
        0, 30, 0, 47, 7, 7, 7, 7, 
        7, 7, 45, 0, 30, 0, 47, 7, 
        7, 7, 7, 7, 7, 45, 0, 30, 
        0, 47, 41, 7, 41, 7, 7, 41, 
        41, 41, 7, 39, 39, 45, 0, 42, 
        0, 50, 41, 7, 41, 39, 39, 41, 
        41, 41, 7, 39, 39, 43, 42, 7, 
        51, 41, 7, 41, 39, 39, 41, 41, 
        41, 7, 31, 31, 45, 34, 0, 50, 
        26, 0, 26, 31, 31, 26, 26, 26, 
        0, 36, 36, 45, 37, 0, 23, 52, 
        0, 0, 0, 36, 36, 0, 0, 0, 
        0, 31, 31, 45, 34, 0, 0, 50, 
        26, 0, 26, 31, 31, 26, 26, 26, 
        0, 31, 31, 45, 32, 0, 46, 0, 
        31, 31, 0, 31, 31, 45, 32, 0, 
        46, 0, 31, 31, 0, 39, 39, 45, 
        0, 40, 0, 46, 7, 39, 39, 7, 
        39, 39, 53, 43, 40, 7, 44, 7, 
        39, 39, 7, 31, 31, 45, 45, 32, 
        0, 46, 0, 31, 31, 0, 0, 45, 
        45, 27, 47, 26, 0, 26, 0, 26, 
        26, 26, 0, 45, 45, 0, 0, 0, 
        45, 27, 47, 26, 0, 26, 0, 26, 
        26, 26, 0, 45, 0, 0, 45, 0, 
        0, 23, 45, 24, 23, 48, 0, 0, 
        0, 23, 0, 0, 0, 0, 0, 45, 
        27, 0, 47, 26, 0, 26, 0, 26, 
        26, 26, 0, 45, 49, 0, 0, 7, 
        7, 0, 45, 30, 0, 47, 7, 7, 
        7, 7, 31, 31, 45, 32, 0, 46, 
        0, 31, 31, 0, 31, 31, 45, 34, 
        0, 50, 26, 0, 26, 31, 31, 26, 
        26, 26, 0, 36, 36, 45, 37, 0, 
        23, 52, 0, 0, 0, 36, 36, 0, 
        0, 0, 0, 31, 31, 45, 34, 0, 
        0, 50, 26, 0, 26, 31, 31, 26, 
        26, 26, 0, 31, 31, 45, 32, 0, 
        46, 0, 31, 31, 0, 31, 31, 45, 
        32, 0, 46, 0, 31, 31, 0, 39, 
        39, 0, 45, 40, 0, 46, 7, 39, 
        39, 7, 7, 7, 0, 45, 30, 0, 
        47, 41, 7, 41, 7, 7, 41, 41, 
        41, 7, 39, 39, 0, 45, 42, 0, 
        50, 41, 7, 41, 39, 39, 41, 41, 
        41, 7, 39, 39, 43, 43, 40, 7, 
        44, 7, 39, 39, 7, 31, 31, 45, 
        45, 34, 0, 50, 26, 0, 26, 31, 
        31, 26, 26, 26, 0, 36, 36, 45, 
        45, 37, 0, 23, 52, 0, 0, 0, 
        36, 36, 0, 0, 0, 0, 0, 45, 
        45, 27, 0, 47, 26, 0, 26, 0, 
        26, 26, 26, 0, 23, 45, 45, 24, 
        23, 48, 0, 0, 0, 23, 0, 0, 
        0, 0, 45, 45, 49, 0, 0, 45, 
        45, 0, 0, 7, 7, 45, 45, 30, 
        0, 47, 7, 7, 7, 7, 7, 7, 
        45, 45, 30, 0, 47, 7, 7, 7, 
        7, 7, 7, 45, 45, 30, 0, 47, 
        41, 7, 41, 7, 7, 41, 41, 41, 
        7, 39, 39, 45, 45, 42, 0, 50, 
        41, 7, 41, 39, 39, 41, 41, 41, 
        7, 39, 39, 43, 43, 42, 7, 51, 
        41, 7, 41, 39, 39, 41, 41, 41, 
        7, 31, 31, 45, 45, 32, 0, 46, 
        0, 31, 31, 0, 31, 31, 45, 45, 
        32, 0, 46, 0, 31, 31, 0, 39, 
        39, 53, 43, 42, 7, 51, 41, 7, 
        41, 39, 39, 41, 41, 41, 7, 7, 
        43, 43, 30, 54, 41, 7, 41, 7, 
        41, 41, 41, 7, 7, 53, 43, 30, 
        54, 41, 7, 41, 7, 41, 41, 41, 
        7, 39, 39, 45, 45, 40, 0, 46, 
        7, 39, 39, 7, 31, 31, 45, 45, 
        34, 0, 0, 50, 26, 0, 26, 31, 
        31, 26, 26, 26, 0, 39, 39, 43, 
        42, 7, 51, 41, 7, 41, 39, 39, 
        41, 41, 41, 7, 43, 43, 7, 7, 
        7, 43, 30, 54, 41, 7, 41, 7, 
        41, 41, 41, 7, 7, 7, 0, 45, 
        30, 0, 47, 7, 7, 7, 7, 7, 
        43, 30, 54, 41, 7, 41, 7, 41, 
        41, 41, 7, 53, 43, 7, 7, 39, 
        39, 43, 40, 7, 44, 7, 39, 39, 
        7, 43, 7, 7, 43, 7, 7, 7, 
        7, 0, 0, 30, 11, 28, 7, 7, 
        7, 55, 55, 55, 55, 55, 1, 0, 
        0, 0, 0, 0, 0, 0, 0, 1, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 1, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 1, 56, 0, 0, 56, 
        0, 0, 0, 0, 1, 0, 57, 0, 
        57, 0, 57, 0, 57, 0, 57, 0, 
        57, 0, 0, 0, 57, 0, 0, 0, 
        0, 57, 7, 7, 7, 7, 7, 57, 
        58, 0, 0, 0, 0, 0, 57, 0, 
        59, 0, 0, 57, 0, 59, 0, 0, 
        0, 0, 57, 59, 57, 0, 57, 0, 
        57, 0, 57, 0, 57, 0, 57, 0, 
        57, 0, 57, 0, 0, 0, 57, 0, 
        0, 0, 0, 57, 7, 7, 57, 60, 
        0, 0, 0, 0, 0, 57, 0, 59, 
        0, 0, 57, 0, 59, 0, 0, 0, 
        57, 0, 57, 0, 57, 0, 57, 0, 
        57, 0, 57, 0, 57, 0, 57, 0, 
        57, 0, 57, 0, 0, 0, 57, 0, 
        0, 0, 0, 57, 7, 7, 57, 0, 
        57, 61, 57, 0, 59, 0, 0, 57, 
        0, 57, 0, 57, 7, 7, 57, 0, 
        57, 61, 57, 0, 57, 0, 57, 7, 
        7, 57, 60, 0, 0, 0, 0, 0, 
        57, 7, 7, 7, 7, 7, 57, 58, 
        0, 0, 0, 0, 0, 57, 63, 62, 
        65, 64, 69, 70, 68, 0, 0, 3, 
        0, 3, 3, 3, 71, 12, 0, 0, 
        0, 12, 0, 45, 0, 0, 45, 0, 
        0, 45, 45, 0, 0, 0, 0, 73, 
        56, 0, 56, 73, 75, 56, 74, 0, 
        76, 78, 56, 77, 0, 79, 81, 82, 
        0, 80, 82, 83, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 11, 11, 11, 11, 
        1, 11, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 1, 1, 1, 
        1, 1, 1, 1, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 11, 11, 11, 
        11, 11, 11, 11, 11, 1, 1, 1, 
        1, 1, 57, 57, 57, 57, 57, 57, 
        57, 57, 57, 57, 57, 57, 57, 57, 
        57, 57, 57, 57, 57, 57, 57, 57, 
        57, 57, 57, 57, 57, 57, 57, 57, 
        57, 57, 57, 57, 57, 57, 57, 57, 
        57, 57, 57, 57, 57, 57, 57, 57, 
        57, 57, 57, 57, 57, 57, 62, 64, 
        71, 72, 72, 72, 11, 11, 11, 73, 
        73, 76, 79, 83, 0
    ]

    class << self
        attr_accessor :_hpricot_scan_to_state_actions
    end
    self._hpricot_scan_to_state_actions = [
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 66, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 66, 0, 
        66, 0, 66, 0
    ]

    class << self
        attr_accessor :_hpricot_scan_from_state_actions
    end
    self._hpricot_scan_from_state_actions = [
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 67, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 67, 0, 
        67, 0, 67, 0
    ]

    class << self
        attr_accessor :_hpricot_scan_eof_trans
    end
    self._hpricot_scan_eof_trans = [
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1687, 1687, 1687, 1687, 1626, 1687, 1626, 1626, 
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 
        1687, 1626, 1626, 1626, 1626, 1626, 1678, 1678, 
        1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 
        1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 
        1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 
        1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 
        1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 
        1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 
        1678, 1678, 1679, 1680, 0, 1681, 1684, 1684, 
        1684, 1687, 1687, 1687, 1689, 1689, 0, 1690, 
        0, 1691, 0, 1692
    ]

    class << self
        attr_accessor :hpricot_scan_start
    end
    self.hpricot_scan_start = 204;

    class << self
        attr_accessor :hpricot_scan_error
    end
    self.hpricot_scan_error = -1;

    class << self
        attr_accessor :hpricot_scan_en_html_comment
    end
    self.hpricot_scan_en_html_comment = 214;
    class << self
        attr_accessor :hpricot_scan_en_html_cdata
    end
    self.hpricot_scan_en_html_cdata = 216;
    class << self
        attr_accessor :hpricot_scan_en_html_procins
    end
    self.hpricot_scan_en_html_procins = 218;
    class << self
        attr_accessor :hpricot_scan_en_main
    end
    self.hpricot_scan_en_main = 204;

    def hpricot_scan(source, &block)
        raise LocalJumpError, "no block given in 'hpricot_scan'" unless block_given?

        @buf   = ''
        @block = block
        @attr  = nil
        @taint = source.tainted?
        @tag, @akey, @aval = [nil], [nil], [nil]

        unless source.respond_to? 'read' then
            if source.respond_to? 'to_str' then
                source = source.to_str
            else
                raise ArgumentError, "bad Hpricot argument, String or IO only please."
            end
        end

        begin
            @cs = HpricotScanner::hpricot_scan_start
            @ts, @te, @act = -1, -1, 0
        end

        while (!@done)
            str, pe, len = nil, nil, nil
            @p = @have

            space = @buffer_size - @have

            if space == 0 then
                @buffer_size += DEFAULT_BUFFER_SIZE;
                space = @buffer_size - @have;
            end

            if source.respond_to? :read
                @encoding = source.internal_encoding || source.external_encoding
                str = source.read(space)
            else
                @encoding = source.encoding
                str = source.force_encoding('BINARY')[@nread, space]
                source.force_encoding(@encoding)
            end
            len = str.length

            @buf   = @buf + str
            @nread = @nread + len

            if len < space then
                len   = len + 1
                @done = true
            end

            pe   = @p + len;

            begin
                testEof = false
                _slen, _trans, _keys, _inds, _acts, _nacts = nil, nil, nil, nil, nil, nil
                _goto_level = 0
                _resume = 10
                _eof_trans = 15
                _again = 20
                _test_eof = 30
                _out = 40
                while true
                if _goto_level <= 0
                if @p == pe - 1
                    _goto_level = _test_eof
                    next
                end
                end
                if _goto_level <= _resume
                case HpricotScanner._hpricot_scan_from_state_actions[@cs] 
                when 67 then
                    begin
            @ts = @p
                    end
                end
                _keys = HpricotScanner._hpricot_scan_key_offsets[@cs]
                _trans = HpricotScanner._hpricot_scan_index_offsets[@cs]
                _klen = HpricotScanner._hpricot_scan_single_lengths[@cs]
                _break_match = false
                
                begin
                  if _klen > 0
                     _lower = _keys
                     _upper = _keys + _klen - 1

                     loop do
                        break if _upper < _lower
                        _mid = _lower + ( (_upper - _lower) >> 1 )

                        currbyte = @buf[@p].getbyte(0)
                        if currbyte < HpricotScanner._hpricot_scan_trans_keys[_mid]
                           _upper = _mid - 1
                        elsif currbyte > HpricotScanner._hpricot_scan_trans_keys[_mid]
                           _lower = _mid + 1
                        else
                           _trans += (_mid - _keys)
                           _break_match = true
                           break
                        end
                     end # loop
                     break if _break_match
                     _keys += _klen
                     _trans += _klen
                  end
                  _klen = HpricotScanner._hpricot_scan_range_lengths[@cs]
                  if _klen > 0
                     _lower = _keys
                     _upper = _keys + (_klen << 1) - 2
                     loop do
                        break if _upper < _lower
                        _mid = _lower + (((_upper-_lower) >> 1) & ~1)

                        currbyte = @buf[@p].getbyte(0)
                        if currbyte < HpricotScanner._hpricot_scan_trans_keys[_mid]
                          _upper = _mid - 2
                        elsif currbyte > HpricotScanner._hpricot_scan_trans_keys[_mid+1]
                          _lower = _mid + 2
                        else
                          _trans += ((_mid - _keys) >> 1)
                          _break_match = true
                          break
                        end
                     end # loop
                     break if _break_match
                     _trans += _klen
                  end
                end while false
                end

                if _goto_level <= _eof_trans
                @cs = HpricotScanner._hpricot_scan_trans_targs[_trans]
                if HpricotScanner._hpricot_scan_trans_actions[_trans] != 0
                case HpricotScanner._hpricot_scan_trans_actions[_trans]

                when 3 then
                    begin
             @mark_tag = @p; 		end
                when 7 then
                    begin
             @mark_aval = @p; 		end
                when 4 then
                    begin
             SET(@tag, @p); 		end
                when 45 then
                    begin
             SET(@aval, @p); 		end
                when 31 then
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                when 23 then
                    begin
             SET(@akey, @p); 		end
                when 58 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("version"), @aval); 		end
                when 60 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("encoding"), @aval); 		end
                when 61 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("standalone"), @aval); 		end
                when 9 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("public_id"), @aval); 		end
                when 12 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("system_id"), @aval); 		end
                when 27 then
                    begin
             
                ATTR(@akey, @aval);
                    end
                when 55 then
                    begin
             TEXT_PASS(); 		end
                when 56 then
                    begin
            @te = @p+1
                    end
                when 74 then
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 76 then
                    begin
            @te = @p
            @p = @p - 1; begin  TEXT_PASS();  end
                    end
                when 62 then
                    begin
             begin @p = ((@te))-1; end
             begin  TEXT_PASS();  end
                    end
                when 77 then
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 79 then
                    begin
            @te = @p
            @p = @p - 1; begin  TEXT_PASS();  end
                    end
                when 64 then
                    begin
             begin @p = ((@te))-1; end
             begin  TEXT_PASS();  end
                    end
                when 80 then
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 83 then
                    begin
            @te = @p
            @p = @p - 1; begin  TEXT_PASS();  end
                    end
                when 59 then
                    begin
            @te = @p+1
             begin  ELE(:xmldecl);  end
                    end
                when 6 then
                    begin
            @te = @p+1
             begin  ELE(:doctype);  end
                    end
                when 22 then
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 19 then
                    begin
            @te = @p+1
             begin  ELE(:etag);  end
                    end
                when 29 then
                    begin
            @te = @p+1
             begin  ELE(:emptytag);  end
                    end
                when 2 then
                    begin
            @te = @p+1
             begin  	begin
                    @cs = 214
                    _goto_level = _again
                    next
                end
              end
                    end
                when 17 then
                    begin
            @te = @p+1
             begin  	begin
                    @cs = 216
                    _goto_level = _again
                    next
                end
              end
                    end
                when 68 then
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 72 then
                    begin
            @te = @p
            @p = @p - 1; begin  ELE(:doctype);  end
                    end
                when 73 then
                    begin
            @te = @p
            @p = @p - 1; begin  	begin
                    @cs = 218
                    _goto_level = _again
                    next
                end
              end
                    end
                when 71 then
                    begin
            @te = @p
            @p = @p - 1; begin  TEXT_PASS();  end
                    end
                when 57 then
                    begin
             begin @p = ((@te))-1; end
             begin  	begin
                    @cs = 218
                    _goto_level = _again
                    next
                end
              end
                    end
                when 1 then
                    begin
             begin @p = ((@te))-1; end
             begin  TEXT_PASS();  end
                    end
                when 11 then
                    begin
                case @act
                when 8 then
                begin begin @p = ((@te))-1; end
             ELE(:doctype); end
                when 10 then
                begin begin @p = ((@te))-1; end
             ELE(:stag); end
                when 12 then
                begin begin @p = ((@te))-1; end
             ELE(:emptytag); end
                when 15 then
                begin begin @p = ((@te))-1; end
             TEXT_PASS(); end
            end 
                        end
                when 43 then
                    begin
             @mark_aval = @p; 		end
                    begin
             SET(@aval, @p); 		end
                when 39 then
                    begin
             @mark_aval = @p; 		end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else  SET(@aval, @p) end
                    end
                when 8 then
                    begin
             @mark_aval = @p; 		end
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("public_id"), @aval); 		end
                when 10 then
                    begin
             @mark_aval = @p; 		end
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("system_id"), @aval); 		end
                when 30 then
                    begin
             @mark_aval = @p; 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                when 5 then
                    begin
             SET(@tag, @p); 		end
                    begin
            @te = @p+1
             begin  ELE(:doctype);  end
                    end
                when 20 then
                    begin
             SET(@tag, @p); 		end
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 18 then
                    begin
             SET(@tag, @p); 		end
                    begin
            @te = @p+1
             begin  ELE(:etag);  end
                    end
                when 53 then
                    begin
             SET(@aval, @p); 		end
                    begin
             @mark_aval = @p; 		end
                when 32 then
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                when 36 then
                    begin
             SET(@akey, @p); 		end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                when 24 then
                    begin
             SET(@akey, @p); 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                when 15 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("public_id"), @aval); 		end
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("system_id"), @aval); 		end
                when 21 then
                    begin
             
                @akey[0] = nil
                @aval[0] = nil
                @mark_akey = -1;
                @mark_aval = -1;
                    end
                    begin
             @mark_akey = @p; 		end
                when 34 then
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                when 28 then
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 75 then
                    begin
            @curline += 1;		end
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 78 then
                    begin
            @curline += 1;		end
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 81 then
                    begin
            @curline += 1;		end
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 69 then
                    begin
            @curline += 1;		end
                    begin
            @te = @p+1
             begin  TEXT_PASS();  end
                    end
                when 63 then
                    begin
             EBLK(:comment, 3); 	begin
                    @cs = 204
                    _goto_level = _again
                    next
                end
                    end
                    begin
            @te = @p+1
                    end
                when 65 then
                    begin
             EBLK(:cdata, 3); 	begin
                    @cs = 204
                    _goto_level = _again
                    next
                end
                    end
                    begin
            @te = @p+1
                    end
                when 82 then
                    begin
             EBLK(:procins, 2); 	begin
                    @cs = 204
                    _goto_level = _again
                    next
                end
                    end
                    begin
            @te = @p+1
                    end
                when 16 then
                    begin
            @te = @p+1
                    end
                    begin
            @act = 8;		end
                when 49 then
                    begin
            @te = @p+1
                    end
                    begin
            @act = 12;		end
                when 40 then
                    begin
             @mark_aval = @p; 		end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                when 42 then
                    begin
             @mark_aval = @p; 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                when 37 then
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                    begin
             SET(@akey, @p); 		end
                    begin
             
                ATTR(@akey, @aval)
                    end
                when 33 then
                    begin

                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p) end
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 25 then
                    begin
             SET(@akey, @p); 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 13 then
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("public_id"), @aval); 		end
                    begin
             @mark_aval = @p; 		end
                    begin
             SET(@aval, @p); ATTR(rb_str_new2("system_id"), @aval); 		end
                when 35 then
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1);
                else SET(@aval, @p) end
                    end
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 26 then
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                @akey[0] = nil
                @aval[0] = nil
                @mark_akey = -1;
                @mark_aval = -1;
                    end
                    begin
             @mark_akey = @p; 		end
                when 70 then
                    begin
            @te = @p+1
                    end
                    begin

                if @text then
                  CAT(@tag, @p);
                  ELE(:text);
                  @text = false;
                end
                @attr = nil
                @tag[0] = nil
                @mark_tag = -1
                @ele_open = true;
                    end
                    begin
            @act = 15;		end
                when 14 then
                    begin
            @te = @p+1
                    end
                    begin
             @mark_aval = @p; 		end
                    begin
            @act = 8;		end
                when 47 then
                    begin
            @te = @p+1
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @act = 10;		end
                when 41 then
                    begin
             @mark_aval = @p; 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                @akey[0] = nil
                @aval[0] = nil
                @mark_akey = -1;
                @mark_aval = -1;
                    end
                    begin
             @mark_akey = @p; 		end
                when 38 then
                    begin
             
                if (@buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE) then SET(@aval, @p-1)
                else SET(@aval, @p); end
                    end
                    begin
             SET(@akey, @p); 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @te = @p+1
             begin  ELE(:stag);  end
                    end
                when 54 then
                    begin
            @te = @p+1
                    end
                    begin
             @mark_aval = @p; 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @act = 10;		end
                when 46 then
                    begin
            @te = @p+1
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p); end
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @act = 10;		end
                when 48 then
                    begin
            @te = @p+1
                    end
                    begin
             SET(@akey, @p); 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @act = 10;		end
                when 50 then
                    begin
            @te = @p+1
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p); end
                    end
                    begin
            @act = 10;		end
                when 44 then
                    begin
            @te = @p+1
                    end
                    begin
             @mark_aval = @p; 		end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p); end
                    end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @act = 10;		end
                when 51 then
                    begin
            @te = @p+1
                    end
                    begin
             @mark_aval = @p; 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p); end
                    end
                    begin
            @act = 10;		end
                when 52 then
                    begin
            @te = @p+1
                    end
                    begin
             
                if @buf[@p-1] == DOUBLE_QUOTE || @buf[@p-1] == SINGLE_QUOTE then SET(@aval, @p-1)
                else SET(@aval, @p); end
                    end
                    begin
             SET(@akey, @p); 		end
                    begin
             
                ATTR(@akey, @aval);
                    end
                    begin
            @act = 10;		end
                end
                end
                end
                if _goto_level <= _again
                case HpricotScanner._hpricot_scan_to_state_actions[@cs] 
                when 66 then
                    begin
            @ts = -1;		end
                end

                @p += 1
                if @p != pe - 1
                    _goto_level = _resume
                    next
                end
                end
                if _goto_level <= _test_eof
                if @p == @eof
                if HpricotScanner._hpricot_scan_eof_trans[@cs] > 0
                    _trans = HpricotScanner._hpricot_scan_eof_trans[@cs] - 1;
                    _goto_level = _eof_trans
                    next;
                end
                end

                end
                if _goto_level <= _out
                    break
                end
            end
                end

            if @cs == HpricotScanner.hpricot_scan_error then
                raise Hpricot::ParseError, @tag[0].nil? ? 
                    "parse error on line #{@curline}\n#{NO_WAY_SERIOUSLY}" :
                    "parse error on element <#{@tag.to_s}>, starting on line #{@curline}.\n#{NO_WAY_SERIOUSLY}"
            end

            if @done and @ele_open then
                @ele_open = false
                if @ts > -1 then
                    @mark_tag = @ts
                    @ts = -1
                    @text = true
                end
            end

            if @ts == -1 then
                @have = 0
                if @mark_tag != -1 and @text then
                    if @done then
                        if @mark_tag < @p - 1 then
                            CAT(@tag, @p)
                            ELE(:text)
                        end
                    else
                        CAT(@tag, @p)
                    end
                end
                @mark_tag = 0
                @buf = ''
            else
                @have = pe - @ts
                @buf  = @buf[@ts, @have]
                SLIDE(@tag)
                SLIDE(@akey)
                SLIDE(@aval)
                @te = @te - @ts
                @ts = 0
            end

            nil

        end
    end
end

